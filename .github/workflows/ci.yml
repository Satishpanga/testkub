name: CI/CD Pipeline

on:
  push:
    branches:
      - main
    paths:
      - 'README.md'
      - 'backend/**'
      - 'frontend/**'
      - 'helm/**'
      - 'k8s.bak/**'
      - 'kubernetes/**'

env:
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
  MATTERMOST_WEBHOOK: ${{ secrets.MATTERMOST_WEBHOOK }}
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    steps:
      # Checkout code
      - uses: actions/checkout@v4

      # Setup Node.js (required for frontend/backend build)
      - uses: actions/setup-node@v4
        with:
          node-version: '18'

      # Read frontend version (for Docker tag)
      - id: get_version
        run: |
          VERSION=$(node -p "require('./frontend/package.json').version")
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      # SonarQube scan
      - name: SonarQube Scan
        uses: sonarsource/sonarcloud-github-action@v2
        with:
          projectBaseDir: .
          sonarToken: ${{ env.SONAR_TOKEN }}
          args: >
            -Dsonar.projectKey=your_project_key
            -Dsonar.host.url=${{ env.SONAR_HOST_URL }}

      # Notify Mattermost on SonarQube errors
      - name: Notify on SonarQube issues
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"SonarQube test failed in CI."}' ${{ env.MATTERMOST_WEBHOOK }}

      # Build backend Docker image
      - name: Build backend Docker image
        run: |
          docker build -t pangasathish/my-backend:${{ env.VERSION }} ./backend

      # Build frontend Docker image
      - name: Build frontend Docker image
        run: |
          docker build -t pangasathish/my-frontend:${{ env.VERSION }} ./frontend

      # Trivy scan for backend
      - name: Scan backend image with Trivy
        id: trivy-backend
        uses: aquasecurity/trivy-action@v0.14.0
        with:
          image-ref: pangasathish/my-backend:${{ env.VERSION }}

      - name: Notify Mattermost on Trivy backend scan errors
        if: ${{ failure() && steps.trivy-backend.outcome == 'failure' }}
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"Trivy scan failed for backend image."}' ${{ env.MATTERMOST_WEBHOOK }}

      # Trivy scan for frontend
      - name: Scan frontend image with Trivy
        id: trivy-frontend
        uses: aquasecurity/trivy-action@v0.14.0
        with:
          image-ref: pangasathish/my-frontend:${{ env.VERSION }}

      - name: Notify Mattermost on Trivy frontend scan errors
        if: ${{ failure() && steps.trivy-frontend.outcome == 'failure' }}
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"Trivy scan failed for frontend image."}' ${{ env.MATTERMOST_WEBHOOK }}

      # Login to DockerHub
      - name: Login to DockerHub
        run: echo "${DOCKERHUB_TOKEN}" | docker login -u "${DOCKERHUB_USERNAME}" --password-stdin

      # Push images to DockerHub
      - name: Push backend
        run: docker push pangasathish/my-backend:${{ env.VERSION }}

      - name: Push frontend
        run: docker push pangasathish/my-frontend:${{ env.VERSION }}

      # Update image tags in Helm charts only
      - name: Update image tags in helm/
        run: |
          find helm/ -type f -exec sed -i "s|pangasathish/my-frontend:.*|pangasathish/my-frontend:${{ env.VERSION }}|g" {} +
          find helm/ -type f -exec sed -i "s|pangasathish/my-backend:.*|pangasathish/my-backend:${{ env.VERSION }}|g" {} +
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add helm/
          git commit -m "Update Docker image tags in Helm to ${{ env.VERSION }}" || echo "No changes to commit"
          git push

      - name: Notify on CI Success
        if: success()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"CI completed successfully with version ${{ env.VERSION }}."}' ${{ env.MATTERMOST_WEBHOOK }}





    #   Update image tags in Helm Charts and manifests
    #   - name: Update image tags
    #     run: |
    #       find helm/ kubernetes/ -type f -exec sed -i "s|pangasathish/my-frontend:.*|pangasathish/my-frontend:${{ env.VERSION }}|g" {} +
    #       find helm/ kubernetes/ -type f -exec sed -i "s|pangasathish/my-backend:.*|pangasathish/my-backend:${{ env.VERSION }}|g" {} +
    #       git config user.name github-actions
    #       git config user.email github-actions@github.com
    #       git add helm/ kubernetes/
    #       git commit -m "Update Docker image tags to ${{ env.VERSION }}" || echo "No changes to commit"
    #       git push

    #   - name: Notify on CI Success
        # if: success()
    #     run: |
    #       curl -X POST -H 'Content-type: application/json' --data '{"text":"CI completed successfully with version ${{ env.VERSION }}."}' ${{ env.MATTERMOST_WEBHOOK }}

